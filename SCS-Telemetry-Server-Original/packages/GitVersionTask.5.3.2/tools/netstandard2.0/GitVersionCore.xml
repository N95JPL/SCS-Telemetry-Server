<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GitVersionCore</name>
    </assembly>
    <members>
        <member name="M:GitVersion.BuildAgents.Jenkins.ShouldCleanUpRemotes">
            <summary>
            When Jenkins uses pipeline-as-code, it creates two remotes: "origin" and "origin1".
            This should be cleaned up, so that normizaling the Git repo will not fail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GitVersion.Common.IRepositoryMetadataProvider.FindMergeBase(LibGit2Sharp.Branch,LibGit2Sharp.Branch)">
            <summary>
            Find the merge base of the two branches, i.e. the best common ancestor of the two branches' tips.
            </summary>
        </member>
        <member name="M:GitVersion.Common.IRepositoryMetadataProvider.FindCommitBranchWasBranchedFrom(LibGit2Sharp.Branch,GitVersion.Model.Configuration.Config,LibGit2Sharp.Branch[])">
            <summary>
            Find the commit where the given branch was branched from another branch.
            If there are multiple such commits and branches, tries to guess based on commit histories.
            </summary>
        </member>
        <member name="M:GitVersion.Configuration.BranchConfigurationCalculator.GetBranchConfiguration(LibGit2Sharp.Branch,LibGit2Sharp.Commit,GitVersion.Model.Configuration.Config,System.Collections.Generic.IList{LibGit2Sharp.Branch})">
            <summary>
            Gets the <see cref="T:GitVersion.Model.Configuration.BranchConfig"/> for the current commit.
            </summary>
        </member>
        <member name="M:GitVersion.Configuration.IBranchConfigurationCalculator.GetBranchConfiguration(LibGit2Sharp.Branch,LibGit2Sharp.Commit,GitVersion.Model.Configuration.Config,System.Collections.Generic.IList{LibGit2Sharp.Branch})">
            <summary>
            Gets the <see cref="T:GitVersion.Model.Configuration.BranchConfig"/> for the current commit.
            </summary>
        </member>
        <member name="M:GitVersion.GitPreparer.NormalizeGitDirectory(System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Normalization of a git directory turns all remote branches into local branches, turns pull request refs into a real branch and a few other things. This is designed to be run *only on the build server* which checks out repositories in different ways.
            It is not recommended to run normalization against a local repository
            </summary>
        </member>
        <member name="M:GitVersion.RepositoryMetadataProvider.FindMergeBase(LibGit2Sharp.Branch,LibGit2Sharp.Branch)">
            <summary>
            Find the merge base of the two branches, i.e. the best common ancestor of the two branches' tips.
            </summary>
        </member>
        <member name="M:GitVersion.RepositoryMetadataProvider.FindCommitBranchWasBranchedFrom(LibGit2Sharp.Branch,GitVersion.Model.Configuration.Config,LibGit2Sharp.Branch[])">
            <summary>
            Find the commit where the given branch was branched from another branch.
            If there are multiple such commits and branches, tries to guess based on commit histories.
            </summary>
        </member>
        <member name="M:GitVersion.Extensions.LibGitExtensions.IsSameBranch(LibGit2Sharp.Branch,LibGit2Sharp.Branch)">
            <summary>
            Checks if the two branch objects refer to the same branch (have the same friendly name).
            </summary>
        </member>
        <member name="M:GitVersion.Extensions.LibGitExtensions.ExcludingBranches(System.Collections.Generic.IEnumerable{GitVersion.BranchCommit},System.Collections.Generic.IEnumerable{LibGit2Sharp.Branch})">
            <summary>
            Exclude the given branches (by value equality according to friendly name).
            </summary>
        </member>
        <member name="M:GitVersion.Extensions.LibGitExtensions.ExcludingBranches(System.Collections.Generic.IEnumerable{LibGit2Sharp.Branch},System.Collections.Generic.IEnumerable{LibGit2Sharp.Branch})">
            <summary>
            Exclude the given branches (by value equality according to friendly name).
            </summary>
        </member>
        <member name="M:GitVersion.Extensions.ReadEmbeddedResourceExtensions.ReadAsStringFromEmbeddedResource``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="resourceName">Should include Namespace separated path to resource in assembly referenced by <typeparamref name="T"/></param>
            <returns></returns>
        </member>
        <member name="M:GitVersion.Helpers.EncodingHelper.DetectEncoding(System.String)">
            <summary>
            Detects the encoding of a file if and only if it includes a preamble .
            </summary>
            <param name="filename">The file name to check the encoding of.</param>
            <returns>The encoding of the file if it has a preamble otherwise null.</returns>
        </member>
        <member name="M:GitVersion.Helpers.EncodingHelper.DetectEncoding(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Returns the first encoding where all the preamble bytes match exactly.
            </summary>
            <param name="bytes">The bytes to check for a matching preamble.</param>
            <returns>The encoding that has a matching preamble or null if one was not found.</returns>
        </member>
        <member name="M:GitVersion.Helpers.EncodingHelper.ScanEncodings">
            <summary>
            Returns an ordered list of encodings that have preambles ordered by the length of the
            preamble longest to shortest. This prevents a short preamble masking a longer one
            later in the list.
            </summary>
            <returns>An ordered list of encodings and corresponding preambles.</returns>
        </member>
        <member name="M:GitVersion.Helpers.EncodingHelper.PreambleMatches(System.Text.Encoding,System.Collections.Generic.IList{System.Byte})">
            <summary>
            Verifies that all bytes of an encoding's preamble are present at the beginning of some sample data.
            </summary>
            <param name="encoding">The encoding to check against.</param>
            <param name="data">The data to test.</param>
            <returns>A boolean indicating if a preamble match was found.</returns>
        </member>
        <member name="T:GitVersion.Helpers.ProcessHelper.NativeErrorCode">
            <summary>
            System error codes.
            See: https://msdn.microsoft.com/en-us/library/windows/desktop/ms681382.aspx
            </summary>
        </member>
        <member name="M:GitVersion.Helpers.StringFormatWithExtension.FormatWith``1(System.String,``0,GitVersion.IEnvironment)">
            <summary>
            Formats the <paramref name="template"/>, replacing each expression wrapped in curly braces
            with the corresponding property from the <paramref name="source"/> or <paramref name="environment"/>.
            </summary>
            <param name="template" this="true">The source template, which may contain expressions to be replaced, e.g '{Foo.Bar.CurrencySymbol} foo {Foo.Bar.Price}'</param>
            <param name="source">The source object to apply to the <paramref name="template"/></param>
            <param name="environment"></param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="template"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An environment variable was null and no fallback was provided.</exception>
            <remarks>
            An expression containing "." is treated as a property or field access on the <paramref name="source"/>.
            An expression starting with "env:" is replaced with the value of the corresponding variable from the <paramref name="environment"/>.
            Each expression may specify a single hardcoded fallback value using the {Prop ?? "fallback"} syntax, which applies if the expression evaluates to null.
            </remarks>
            <example>
            // replace an expression with a property value
            "Hello {Name}".FormatWith(new { Name = "Fred" }, env);
            "Hello {Name ?? \"Fred\"}".FormatWith(new { Name = GetNameOrNull() }, env);
            // replace an expression with an environment variable
            "{env:BUILD_NUMBER}".FormatWith(new { }, env);
            "{env:BUILD_NUMBER ?? \"0\"}".FormatWith(new { }, env);
            </example>
        </member>
        <member name="T:GitVersion.BranchCommit">
            <summary>
            A commit, together with the branch to which the commit belongs.
            </summary>
        </member>
        <member name="M:GitVersion.Model.Configuration.BranchConfig.#ctor(GitVersion.Model.Configuration.BranchConfig)">
            <summary>
            Creates a clone of the given <paramref name="branchConfiguration"/>.
            </summary>
        </member>
        <member name="P:GitVersion.Model.Configuration.BranchConfig.Tag">
            <summary>
            Special value 'useBranchName' will extract the tag from the branch name
            </summary>
        </member>
        <member name="P:GitVersion.Model.Configuration.BranchConfig.Name">
            <summary>
            The name given to this configuration in the config file.
            </summary>
        </member>
        <member name="T:GitVersion.Model.Configuration.EffectiveConfiguration">
            <summary>
            Configuration can be applied to different things, effective configuration is the result after applying the appropriate configuration
            </summary>
        </member>
        <member name="P:GitVersion.Model.Configuration.EffectiveConfiguration.GitTagPrefix">
            <summary>
            Git tag prefix
            </summary>
        </member>
        <member name="P:GitVersion.Model.Configuration.EffectiveConfiguration.Tag">
            <summary>
            Tag to use when calculating SemVer
            </summary>
        </member>
        <member name="T:GitVersion.GitVersionContext">
            <summary>
            Contextual information about where GitVersion is being run
            </summary>
        </member>
        <member name="P:GitVersion.GitVersionContext.FullConfiguration">
            <summary>
            Contains the raw configuration, use Configuration for specific config based on the current GitVersion context.
            </summary>
        </member>
        <member name="T:GitVersion.VersionCalculation.ConfigNextVersionVersionStrategy">
            <summary>
            Version is from NextVersion (the configuration value), unless the current commit is tagged.
            BaseVersionSource is null.
            Does not increment.
            </summary>
        </member>
        <member name="T:GitVersion.VersionCalculation.FallbackVersionStrategy">
            <summary>
            Version is 0.1.0.
            BaseVersionSource is the "root" commit reachable from the current commit.
            Does not increment.
            </summary>
        </member>
        <member name="T:GitVersion.VersionCalculation.MergeMessageVersionStrategy">
            <summary>
            Version is extracted from older commits's merge messages.
            BaseVersionSource is the commit where the message was found.
            Increments if PreventIncrementForMergedBranchVersion (from the branch config) is false.
            </summary>
        </member>
        <member name="T:GitVersion.VersionCalculation.TaggedCommitVersionStrategy">
            <summary>
            Version is extracted from all tags on the branch which are valid, and not newer than the current commit.
            BaseVersionSource is the tag's commit.
            Increments if the tag is not the current commit.
            </summary>
        </member>
        <member name="T:GitVersion.VersionCalculation.TrackReleaseBranchesVersionStrategy">
            <summary>
            Active only when the branch is marked as IsDevelop.
            Two different algorithms (results are merged):
            <para>
            Using <see cref="T:GitVersion.VersionCalculation.VersionInBranchNameVersionStrategy"/>:
            Version is that of any child branches marked with IsReleaseBranch (except if they have no commits of their own).
            BaseVersionSource is the commit where the child branch was created.
            Always increments.
            </para>
            <para>
            Using <see cref="T:GitVersion.VersionCalculation.TaggedCommitVersionStrategy"/>:
            Version is extracted from all tags on the <c>master</c> branch which are valid.
            BaseVersionSource is the tag's commit (same as base strategy).
            Increments if the tag is not the current commit (same as base strategy).
            </para>
            </summary>
        </member>
        <member name="T:GitVersion.VersionCalculation.VersionInBranchNameVersionStrategy">
            <summary>
            Version is extracted from the name of the branch.
            BaseVersionSource is the commit where the branch was branched from its parent.
            Does not increment.
            </summary>
        </member>
        <member name="M:GitVersion.VersionCalculation.IVersionStrategy.GetVersions">
            <summary>
            Calculates the <see cref="T:GitVersion.VersionCalculation.BaseVersionCalculators.BaseVersion" /> values.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of the base version values found by the strategy.
            </returns>
        </member>
        <member name="M:GitVersion.VersionCalculation.MainlineVersionCalculator.GetEffectiveMainlineTip(System.Collections.Generic.IEnumerable{LibGit2Sharp.Commit},LibGit2Sharp.Commit,LibGit2Sharp.Commit)">
            <summary>
            Gets the commit on mainline at which <paramref name="mergeBase"/> was fully integrated.
            </summary>
            <param name="mainlineCommitLog">The collection of commits made directly to mainline, in reverse order.</param>
            <param name="mergeBase">The best possible merge base between <paramref name="mainlineTip"/> and the current commit.</param>
            <param name="mainlineTip">The tip of the mainline branch.</param>
            <returns>The commit on mainline at which <paramref name="mergeBase"/> was merged, if such a commit exists; otherwise, <paramref name="mainlineTip"/>.</returns>
            <remarks>
            This method gets the most recent commit on mainline that should be considered for versioning the current branch.
            </remarks>
        </member>
        <member name="M:GitVersion.VersionCalculation.MainlineVersionCalculator.FindMergeBaseBeforeForwardMerge(LibGit2Sharp.Commit,LibGit2Sharp.Branch,LibGit2Sharp.Commit@)">
            <summary>
            Gets the best possible merge base between the current commit and <paramref name="mainline"/> that is not the child of a forward merge.
            </summary>
            <param name="baseVersionSource">The commit that establishes the contextual base version.</param>
            <param name="mainline">The mainline branch.</param>
            <param name="mainlineTip">The commit on mainline at which the returned merge base was fully integrated.</param>
            <returns>The best possible merge base between the current commit and <paramref name="mainline"/> that is not the child of a forward merge.</returns>
        </member>
        <member name="F:GitVersion.IncrementStrategy.Inherit">
            <summary>
            Uses the <see cref="P:GitVersion.Model.Configuration.BranchConfig.Increment"/>, <see cref="P:GitVersion.Model.Configuration.BranchConfig.PreventIncrementOfMergedBranchVersion"/> and <see cref="P:GitVersion.Model.Configuration.BranchConfig.TracksReleaseBranches"/>
            of the "parent" branch (i.e. the branch where the current branch was branched from).
            </summary>
        </member>
        <member name="M:GitVersion.SemanticVersion.ToString(System.String,System.IFormatProvider)">
            <summary>
            <para>s - Default SemVer [1.2.3-beta.4+5]</para>
            <para>f - Full SemVer [1.2.3-beta.4+5]</para>
            <para>i - Informational SemVer [1.2.3-beta.4+5.Branch.master.BranchType.Master.Sha.000000]</para>
            <para>j - Just the SemVer part [1.2.3]</para>
            <para>t - SemVer with the tag [1.2.3-beta.4]</para>
            <para>l - Legacy SemVer tag for systems which do not support SemVer 2.0 properly [1.2.3-beta4]</para>
            <para>lp - Legacy SemVer tag for systems which do not support SemVer 2.0 properly (padded) [1.2.3-beta0004]</para>
            </summary>
        </member>
        <member name="M:GitVersion.SemanticVersionBuildMetaData.ToString(System.String,System.IFormatProvider)">
            <summary>
            <para>b - Formats just the build number</para>
            <para>s - Formats the build number and the Git Sha</para>
            <para>f - Formats the full build metadata</para>
            <para>p - Formats the padded build number. Can specify an integer for padding, default is 4. (i.e., p5)</para>
            </summary>
        </member>
        <member name="M:GitVersion.SemanticVersionPreReleaseTag.ToString(System.String,System.IFormatProvider)">
            <summary>
            Default formats:
            <para>t - SemVer 2.0 formatted tag [beta.1]</para>
            <para>l - Legacy SemVer tag with the tag number padded. [beta1]</para>
            <para>lp - Legacy SemVer tag with the tag number padded. [beta0001]. Can specify an integer to control padding (i.e., lp5)</para>
            </summary>
        </member>
    </members>
</doc>
